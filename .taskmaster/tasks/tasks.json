{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Next.js Project with TypeScript",
        "description": "Initialize a new Next.js project with TypeScript support and set up the basic project structure.",
        "details": "Use create-next-app to set up a new Next.js project with TypeScript. Configure ESLint and Prettier for code quality. Set up a basic folder structure for components, pages, and styles. Install necessary dependencies such as react, react-dom, and next. Use Next.js version 13.4.4 or later to leverage the latest features and optimizations.",
        "testStrategy": "Verify that the project builds without errors and that the development server runs correctly. Check that TypeScript compilation works as expected.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Integrate Supabase for Backend and Database",
        "description": "Set up Supabase as the backend and database solution for the application.",
        "details": "Install @supabase/supabase-js library (version 2.24.0 or later). Create a Supabase project and set up the necessary tables for users, diary entries, and feedback. Configure environment variables for Supabase URL and API key. Create a utility file for Supabase client initialization.",
        "testStrategy": "Write unit tests to ensure successful connection to Supabase. Test CRUD operations on the created tables.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install Supabase Client Library",
            "description": "Install the @supabase/supabase-js library version 2.24.0 or later to enable interaction with Supabase backend services.",
            "dependencies": [],
            "details": "Use npm or yarn to install the Supabase client library in the project environment to facilitate API calls and database operations.",
            "status": "done",
            "testStrategy": "Verify installation by importing the library in a test script and initializing a Supabase client instance without errors."
          },
          {
            "id": 2,
            "title": "Create Supabase Project and Configure Environment",
            "description": "Set up a new Supabase project and configure environment variables for Supabase URL and API key to securely connect the application to the backend.",
            "dependencies": [
              1
            ],
            "details": "Create a project in the Supabase dashboard, retrieve the project URL and API key, and store them in environment variables for use in the application.",
            "status": "done",
            "testStrategy": "Test connection by initializing the Supabase client with environment variables and performing a simple query to confirm connectivity."
          },
          {
            "id": 3,
            "title": "Design and Implement Database Schema with Migrations",
            "description": "Design the database schema for users, diaries, feedbacks, and characters tables and implement them using Supabase migrations.",
            "dependencies": [
              2
            ],
            "details": "Define tables with specified fields and relationships: Diaries (id, user_id, content, mood, created_at), Feedbacks (id, diary_id, character_id, content, is_favorited, created_at), Characters (id, name, description, icon_url, prompt, created_at). Use Supabase SQL editor or migration tools to create these tables.",
            "status": "done",
            "testStrategy": "Verify tables are created with correct columns and constraints by querying the information schema and inserting sample data."
          },
          {
            "id": 4,
            "title": "Create Supabase Client Initialization Utility",
            "description": "Develop a utility file to initialize and export the Supabase client instance using the configured environment variables for reuse across the application.",
            "dependencies": [
              2
            ],
            "details": "Implement a module that imports the Supabase client library, reads environment variables, and exports a configured Supabase client instance for database operations.",
            "status": "done",
            "testStrategy": "Import the utility in a test script and perform a basic query to ensure the client is properly initialized and functional."
          },
          {
            "id": 5,
            "title": "Implement Database Interaction Functions",
            "description": "Develop functions to interact with the Supabase tables for CRUD operations on users, diary entries, feedback, and characters.",
            "dependencies": [
              3,
              4
            ],
            "details": "Write functions to create, read, update, and delete records in the Diaries, Feedbacks, and Characters tables, including grouping diary entries per day for feedback generation.",
            "status": "done",
            "testStrategy": "Unit test each function by performing operations against a test database and verifying expected results and error handling."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement User Authentication with Supabase Auth",
        "description": "Set up user authentication using Supabase Auth, including sign up, login, and logout functionality.",
        "details": "Use Supabase Auth methods for user sign up, login, and logout. Implement protected routes using Next.js middleware. Create React components for sign up and login forms. Use React Context API for managing auth state across the application.",
        "testStrategy": "Write integration tests for the authentication flow. Test protected routes to ensure they redirect unauthenticated users.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Set Up Supabase Project and Configure Auth",
            "description": "Create a new Supabase project, enable authentication, and obtain the project URL and anon key.",
            "dependencies": [],
            "details": "Sign up or log in to Supabase, create a new project, enable authentication in the Supabase dashboard, and note the Project URL and Anon Key for integration.",
            "status": "done",
            "testStrategy": "Verify that the Supabase project is accessible and authentication is enabled in the dashboard."
          },
          {
            "id": 2,
            "title": "Install and Configure Supabase Client in Next.js",
            "description": "Install Supabase client libraries and set up environment variables in the Next.js project.",
            "dependencies": [
              1
            ],
            "details": "Install @supabase/supabase-js and @supabase/ssr packages. Add NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY to .env.local. Create utility functions for browser and server clients.",
            "status": "done",
            "testStrategy": "Check that the Supabase client can connect to the project using the provided keys and environment variables."
          },
          {
            "id": 3,
            "title": "Implement Sign Up, Login, and Logout Functionality",
            "description": "Use Supabase Auth methods to implement user sign up, login, and logout logic.",
            "dependencies": [
              2
            ],
            "details": "Create functions using Supabase Auth API for signing up, logging in, and logging out users. Handle errors and success responses appropriately.",
            "status": "done",
            "testStrategy": "Test each function independently to ensure users can register, log in, and log out successfully."
          },
          {
            "id": 4,
            "title": "Create React Components for Auth Forms",
            "description": "Develop React components for user sign up and login forms, integrating with Supabase Auth logic.",
            "dependencies": [
              3
            ],
            "details": "Build and style sign up and login forms. Connect form submissions to the corresponding Supabase Auth functions. Display error and success messages.",
            "status": "done",
            "testStrategy": "Render forms in the app and verify that user input triggers the correct authentication actions."
          },
          {
            "id": 5,
            "title": "Implement Auth State Management with React Context",
            "description": "Set up React Context API to manage and provide authentication state across the application.",
            "dependencies": [
              4
            ],
            "details": "Create an AuthContext to store user state and authentication status. Provide context to the app and update state on auth events.",
            "status": "done",
            "testStrategy": "Check that authentication state updates correctly on sign up, login, and logout, and is accessible throughout the app."
          },
          {
            "id": 6,
            "title": "Protect Routes Using Next.js Middleware",
            "description": "Implement Next.js middleware to restrict access to protected routes based on authentication state.",
            "dependencies": [
              5
            ],
            "details": "Create middleware that checks for authenticated users before allowing access to protected pages. Redirect unauthenticated users to the login page.",
            "status": "done",
            "testStrategy": "Attempt to access protected routes as both authenticated and unauthenticated users to verify correct redirection and access control."
          }
        ]
      },
      {
        "id": 4,
        "title": "Create Diary Entry Creation Interface",
        "description": "Develop a user interface for creating new diary entries.",
        "details": "Create a React component for the diary entry form. Use react-hook-form (version 7.44.2 or later) for form management and validation. Implement a rich text editor using react-quill (version 2.0.0 or later) for enhanced diary entry formatting. Add functionality to save entries to Supabase.",
        "testStrategy": "Write unit tests for the diary entry form component. Test form validation and submission process.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Dedicated Diary Entry Page Route",
            "description": "Set up a new route at '/diary/new' in the React application to serve as the dedicated page for creating new diary entries.",
            "dependencies": [],
            "details": "Configure the routing logic (e.g., using React Router) to render the diary entry creation component when users navigate to '/diary/new'. Ensure the page is mobile-first and accessible.",
            "status": "done",
            "testStrategy": "Navigate to '/diary/new' and verify that the correct component renders on both desktop and mobile devices."
          },
          {
            "id": 2,
            "title": "Implement Diary Entry Form UI",
            "description": "Develop the form UI with a plain textarea for entry content and an emoji-based mood selector.",
            "dependencies": [
              1
            ],
            "details": "Use react-hook-form (v7.44.2+) for form state management. The form should include a textarea for the diary content and a set of emoji buttons for mood selection. Ensure the UI is mobile-friendly and accessible.",
            "status": "done",
            "testStrategy": "Render the form on the page, verify that the textarea and emoji selector are functional and visually accessible on various screen sizes."
          },
          {
            "id": 3,
            "title": "Add Form Validation",
            "description": "Implement validation rules for the diary entry form using react-hook-form.",
            "dependencies": [
              2
            ],
            "details": "Require that the diary content is not empty and that a mood is selected before allowing submission. Display clear error messages for invalid input.",
            "status": "done",
            "testStrategy": "Attempt to submit the form with missing or invalid data and verify that appropriate validation errors are shown."
          },
          {
            "id": 4,
            "title": "Create Supabase Database Insertion Function",
            "description": "Develop a function to insert new diary entries into Supabase, creating a new record for each submission.",
            "dependencies": [
              3
            ],
            "details": "Implement a simple insertion function that takes the diary content, selected mood, and timestamp, and saves them as a new entry in the Supabase database. No checks for existing entries are needed.",
            "status": "done",
            "testStrategy": "Submit valid form data and verify that a new record appears in the Supabase database each time."
          },
          {
            "id": 5,
            "title": "Implement Save Functionality and Error Handling",
            "description": "Connect the form submission to the Supabase insertion function and handle errors gracefully.",
            "dependencies": [
              4
            ],
            "details": "Trigger the save operation only when the 'Save' button is pressed. Show loading indicators and display user-friendly error messages if the save fails. Reset the form or provide feedback on successful save.",
            "status": "done",
            "testStrategy": "Test saving entries under normal and error conditions (e.g., network failure) and verify correct user feedback and error handling."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Diary Entry Listing and Calendar View",
        "description": "Create interfaces for listing diary entries and viewing them in a calendar format.",
        "details": "Develop a list view component for diary entries. Implement a calendar view using react-big-calendar (version 1.6.9 or later). Fetch diary entries from Supabase and populate both views. Implement pagination for the list view and date range selection for the calendar view.",
        "testStrategy": "Test the rendering of both list and calendar views. Verify correct data fetching and display. Test pagination and date range selection functionality.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Tabbed Interface for List and Calendar Views",
            "description": "Extend the existing /diary/page.tsx to support tab switching between the list and calendar views within the same page.",
            "dependencies": [],
            "details": "Implement a tabbed UI that allows users to switch between the diary entry list and the calendar view, ensuring seamless transitions and state management.",
            "status": "done",
            "testStrategy": "Verify that both tabs render correctly, switching preserves state, and the correct view is displayed upon tab selection."
          },
          {
            "id": 2,
            "title": "Implement Diary Entry List View with Pagination",
            "description": "Develop a list view component that displays diary entries in descending order, showing the first ~20 characters of each entry and paginating 10 entries per page.",
            "dependencies": [
              1
            ],
            "details": "Fetch diary entries from Supabase, sort them by newest first, and display only the first 20 characters per entry. Add pagination controls to navigate through pages of 10 entries each.",
            "status": "done",
            "testStrategy": "Check that entries are correctly ordered, truncated, and paginated. Test navigation between pages and edge cases (e.g., last page with fewer than 10 entries)."
          },
          {
            "id": 3,
            "title": "Integrate react-calendar for Monthly Calendar View",
            "description": "Implement a monthly calendar view using react-calendar, displaying a dot on dates with diary entries and supporting Japanese localization.",
            "dependencies": [
              1
            ],
            "details": "Configure react-calendar for monthly display, localize to Japanese, and visually indicate dates with diary entries using small dots. Ensure initial view is the current month.",
            "status": "done",
            "testStrategy": "Confirm calendar renders in Japanese, dots appear only on dates with entries, and initial month is correct."
          },
          {
            "id": 4,
            "title": "Enable Date Selection and Entry Detail Display in Calendar View",
            "description": "Allow users to click a date in the calendar to view detailed diary entries for that day in a lower section of the calendar view.",
            "dependencies": [
              3
            ],
            "details": "Implement click handlers for calendar dates. When a date with entries is clicked, fetch and display the full details of those entries below the calendar.",
            "status": "done",
            "testStrategy": "Test clicking dates with and without entries, verify correct details are shown, and ensure UI updates appropriately."
          },
          {
            "id": 5,
            "title": "Fetch and Synchronize Diary Entries from Supabase for Both Views",
            "description": "Implement data fetching logic to retrieve diary entries from Supabase and ensure both the list and calendar views are populated and synchronized.",
            "dependencies": [
              2,
              3
            ],
            "details": "Centralize data fetching to avoid duplication, handle loading and error states, and ensure updates in one view are reflected in the other.",
            "status": "done",
            "testStrategy": "Simulate data changes and verify both views update accordingly. Test error handling and loading indicators."
          }
        ]
      },
      {
        "id": 6,
        "title": "Add Diary Entry Search Functionality",
        "description": "Implement a search feature to find diary entries by keywords.",
        "details": "Create a search input component. Implement full-text search using Supabase's text search capabilities. Display search results in the list view. Use debounce technique to optimize search performance.",
        "testStrategy": "Test search functionality with various keywords. Verify that search results are accurate and performant.",
        "priority": "medium",
        "dependencies": [
          5
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design and Implement Search Input Component",
            "description": "Create a search bar UI component to be displayed only in the list view, positioned between the tab switch button and the diary entry list.",
            "dependencies": [],
            "details": "Ensure the search bar is visible only in the list view and includes a search button and a clear (×) button. The search should be triggered by pressing the search button, not in real-time.",
            "status": "done",
            "testStrategy": "Verify the search bar appears in the correct location in the list view, is hidden elsewhere, and that the search and clear buttons function as intended."
          },
          {
            "id": 2,
            "title": "Integrate Supabase Full-Text Search for Diary Body",
            "description": "Implement backend and frontend logic to perform full-text search on diary entry bodies using Supabase's full-text search capabilities.",
            "dependencies": [
              1
            ],
            "details": "Configure the Supabase database to support full-text search on the diary body field. Use appropriate SQL functions (e.g., to_tsvector, to_tsquery) and ensure only the diary body is searched.",
            "status": "done",
            "testStrategy": "Insert sample diary entries and confirm that keyword searches return correct and relevant results, matching only the body text."
          },
          {
            "id": 3,
            "title": "Display and Highlight Search Results in List View",
            "description": "Replace the diary list with search results and highlight matching keywords in bold within the preview snippet.",
            "dependencies": [
              2
            ],
            "details": "When a search is performed, update the list view to show only matching entries. In each result, bold the matched keyword(s) in the preview and ensure the preview includes the relevant context.",
            "status": "done",
            "testStrategy": "Perform searches with various keywords and verify that results are correctly filtered and keywords are bolded in the preview."
          },
          {
            "id": 4,
            "title": "Implement Search History Functionality",
            "description": "Store past search keywords and allow users to reuse them from a history list.",
            "dependencies": [
              1
            ],
            "details": "Save each search keyword to local storage or a suitable backend table. Provide a UI for users to view and select from previous searches.",
            "status": "done",
            "testStrategy": "Perform multiple searches and confirm that keywords are saved, displayed in history, and can be reused to trigger new searches."
          },
          {
            "id": 5,
            "title": "Optimize Search with Debounce and Clear Functionality",
            "description": "Apply debounce to the search input to prevent unnecessary queries and implement logic to clear the search and restore the default list view.",
            "dependencies": [
              1,
              2,
              3
            ],
            "details": "Ensure debounce is applied to the search input to optimize performance. The clear (×) button should reset the search input and display the full diary list.",
            "status": "done",
            "testStrategy": "Test rapid typing in the search bar to confirm debounce works. Use the clear button and verify the list view resets to show all entries."
          }
        ]
      },
      {
        "id": 7,
        "title": "Design and Implement Character System",
        "description": "Create the system for managing the 8 unique characters and their personalities.",
        "details": "Design a data structure to represent each character's attributes (name, personality, speech style). Create a Supabase table to store character information. Implement utility functions for character selection and rotation.",
        "testStrategy": "Unit test character utility functions. Verify that all 8 characters are correctly represented in the system.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Character Data Structure",
            "description": "Design a flexible data structure to represent each character's attributes, including name, personality, speech style, and visual properties such as background color.",
            "dependencies": [],
            "details": "Ensure the structure supports all 8 initial characters and allows for future expansion. Include fields for name, personality, speech style, background color, and avatar reference.",
            "status": "done",
            "testStrategy": "Create mock character objects and verify all required attributes are present and accessible."
          },
          {
            "id": 2,
            "title": "Design Supabase Table Schema for Characters",
            "description": "Create a Supabase table schema to store character information, using appropriate data types for each attribute.",
            "dependencies": [
              1
            ],
            "details": "Map the character data structure to Supabase table columns. Use text or varchar for string fields, and consider enum or text for personality/speech style. Ensure the schema supports extensibility for future characters.",
            "status": "done",
            "testStrategy": "Run migrations to create the table in a test Supabase project and insert sample data for all 8 characters."
          },
          {
            "id": 3,
            "title": "Implement Character CRUD Operations",
            "description": "Develop utility functions to create, read, update, and delete character records in Supabase.",
            "dependencies": [
              2
            ],
            "details": "Implement functions for adding new characters, retrieving character lists, updating character attributes, and removing characters. Ensure functions handle all defined fields and maintain data integrity.",
            "status": "done",
            "testStrategy": "Write unit tests for each CRUD operation, verifying correct database interaction and error handling."
          },
          {
            "id": 4,
            "title": "Develop Character Selection and Rotation Logic",
            "description": "Implement utility functions to handle character selection, rotation, and ensuring all 8 characters provide feedback as required.",
            "dependencies": [
              3
            ],
            "details": "Create logic to select characters for feedback, rotate through all 8, and support favorite registration. Ensure only favorite characters are persisted outside the DB as specified.",
            "status": "done",
            "testStrategy": "Simulate feedback cycles and verify all characters are selected in rotation, with correct handling of favorites."
          },
          {
            "id": 5,
            "title": "Integrate Character System with UI Components",
            "description": "Connect the character system to the feedback and detail card UI, supporting display, selection, and favorite registration.",
            "dependencies": [
              4
            ],
            "details": "Ensure character data populates feedback cards, detail views, and supports the 'start conversation' button. Confirm extensibility for adding new characters.",
            "status": "done",
            "testStrategy": "Perform end-to-end UI tests to verify correct character display, selection, favorite registration, and extensibility."
          }
        ]
      },
      {
        "id": 8,
        "title": "Integrate OpenAI API for Feedback Generation",
        "description": "Set up the OpenAI API integration for generating character feedback.",
        "details": "Install openai npm package (version 3.2.1 or later). Set up environment variables for OpenAI API key. Create a utility function to generate prompts based on diary content and character personality. Implement error handling and retry logic for API calls.",
        "testStrategy": "Test API integration with mock diary entries. Verify that generated feedback matches character personalities.",
        "priority": "high",
        "dependencies": [
          7
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Install and Configure OpenAI SDK",
            "description": "Install the openai npm package (version 3.2.1 or later) and ensure it is properly added to the project dependencies.",
            "dependencies": [],
            "details": "Run 'npm install openai' in the project directory and verify the installation. Import the OpenAI SDK in the main application file.",
            "status": "done",
            "testStrategy": "Check that the package appears in package.json and can be imported without errors in a Node.js script."
          },
          {
            "id": 2,
            "title": "Set Up Environment Variables for API Key",
            "description": "Create and configure an environment file to securely store the OpenAI API key.",
            "dependencies": [
              1
            ],
            "details": "Add the API key to a .env file and ensure it is loaded using a package like dotenv. Update .gitignore to exclude the .env file from version control.",
            "status": "done",
            "testStrategy": "Attempt to access the API key from process.env in a Node.js script and confirm it returns the correct value."
          },
          {
            "id": 3,
            "title": "Develop Prompt Generation Utility",
            "description": "Create a utility function that generates prompts based on diary content and character personality traits.",
            "dependencies": [
              2
            ],
            "details": "Design the function to accept diary content and character data as input, and output a well-structured prompt suitable for the OpenAI API.",
            "status": "done",
            "testStrategy": "Write unit tests to verify that the function produces expected prompt formats for various input scenarios."
          },
          {
            "id": 4,
            "title": "Implement Feedback Generation Logic",
            "description": "Integrate the OpenAI API call to generate feedback using the constructed prompts.",
            "dependencies": [
              3
            ],
            "details": "Use the OpenAI SDK to send the generated prompt to the API and retrieve the feedback response.",
            "status": "done",
            "testStrategy": "Mock API responses in tests and verify that the function correctly handles and returns feedback."
          },
          {
            "id": 5,
            "title": "Add Error Handling and Retry Logic",
            "description": "Implement robust error handling and retry mechanisms for API calls to ensure reliability.",
            "dependencies": [
              4
            ],
            "details": "Detect and handle common API errors, implement retries with exponential backoff, and log errors for monitoring.",
            "status": "done",
            "testStrategy": "Simulate API failures and verify that the retry logic works as intended and errors are logged appropriately."
          }
        ]
      },
      {
        "id": 9,
        "title": "Implement Feedback Generation Scheduler",
        "description": "Create a system to automatically generate feedback at 4 AM daily.",
        "details": "Use node-cron (version 3.0.2 or later) to schedule daily tasks. Implement a serverless function (e.g., using Vercel Serverless Functions) to handle the scheduled task. Fetch relevant diary entries, generate feedback using OpenAI API, and store results in Supabase.",
        "testStrategy": "Test the scheduler with different time zones. Verify that feedback is generated and stored correctly.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Vercel Cron Job for 4 AM User Local Time Execution",
            "description": "Set up Vercel Cron Jobs to trigger a serverless function at 4 AM in each user's local time zone, ensuring correct scheduling for a global user base.",
            "dependencies": [],
            "details": "Define cron expressions and paths in vercel.json for the serverless function. Implement logic to handle time zone differences so that each user's feedback is generated at their local 4 AM. Consider using a queue or database to track user time zones and schedule accordingly.",
            "status": "done",
            "testStrategy": "Verify that the cron job triggers at the correct local time for users in multiple time zones using test accounts."
          },
          {
            "id": 2,
            "title": "Implement Queueing System for Sequential User Processing",
            "description": "Develop a queueing mechanism to process users one at a time, ensuring scalability and orderly feedback generation for up to 1000 users.",
            "dependencies": [
              1
            ],
            "details": "Integrate a queue (e.g., using a managed queue service or database table) to enqueue users for feedback generation. Ensure the system can handle retries and avoid duplicate processing.",
            "status": "done",
            "testStrategy": "Simulate high user volume and verify that users are processed sequentially without overlap or missed entries."
          },
          {
            "id": 3,
            "title": "Fetch Diary Entries for Target Time Window",
            "description": "Retrieve diary entries for each user from Supabase, covering the period from the previous day's 4 AM to the current day's 4 AM.",
            "dependencies": [
              2
            ],
            "details": "Query Supabase for diary entries within the specified time window for each user in the queue. Ensure time window calculations respect user time zones.",
            "status": "done",
            "testStrategy": "Test with users in different time zones and verify that only the correct entries are fetched for the target window."
          },
          {
            "id": 4,
            "title": "Generate AI Feedback and Handle API Calls per Character",
            "description": "For each diary entry, call the OpenAI API up to 8 times per user (once per character) to generate individualized feedback, with robust error handling and retry logic.",
            "dependencies": [
              3
            ],
            "details": "Implement logic to loop through each character, invoke the OpenAI API, and handle failures with retries and error notifications. Ensure API rate limits and quotas are respected.",
            "status": "done",
            "testStrategy": "Mock API failures and verify retry and notification mechanisms. Confirm that feedback is generated for all characters per user."
          },
          {
            "id": 5,
            "title": "Persist Favorited Feedback and Ensure Data Integrity",
            "description": "Store only feedback marked as 'favorited' by users in Supabase, ensuring data is saved reliably and can be retrieved for future use.",
            "dependencies": [
              4
            ],
            "details": "Implement logic to save feedback to Supabase only if it is favorited. Ensure transactional integrity and handle potential save errors gracefully.",
            "status": "done",
            "testStrategy": "Test favoriting and saving flows, including error scenarios, and verify that only favorited feedback is persisted."
          }
        ]
      },
      {
        "id": 10,
        "title": "Develop Feedback Display Interface",
        "description": "Create a user interface to display character feedback to users.",
        "details": "Design and implement a feedback card component. Create a feedback list view that displays cards for each character. Implement a detailed view for individual feedback entries. Use framer-motion (version 10.12.16 or later) for smooth animations and transitions.",
        "testStrategy": "Test the rendering of feedback cards and detailed views. Verify that all character information is displayed correctly.",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create FeedbackCard Component",
            "description": "Develop a reusable card component to display individual feedback entries in the list view.",
            "dependencies": [],
            "details": "Create components/feedback/FeedbackCard.tsx that accepts feedback data as props. Include title, brief content preview, timestamp, and favorite toggle button. Style using Tailwind CSS. The component should be responsive and handle different content lengths appropriately. Do not implement animations with framer-motion as specified in the additional context.",
            "status": "done",
            "testStrategy": "Create unit tests to verify the component renders correctly with different prop values and that the favorite toggle functionality works as expected."
          },
          {
            "id": 2,
            "title": "Implement FeedbackList Component",
            "description": "Create a component that displays multiple FeedbackCard components in a grid or list layout.",
            "dependencies": [
              1
            ],
            "details": "Create components/feedback/FeedbackList.tsx that accepts an array of feedback items and renders FeedbackCard components for each item. Implement proper grid/list layout with responsive design. Handle empty states and loading states appropriately. Ensure the list is accessible and keyboard navigable.",
            "status": "done",
            "testStrategy": "Test the component with various data sets including empty arrays and verify that cards are rendered correctly."
          },
          {
            "id": 3,
            "title": "Develop FeedbackHeader Component with Tabs",
            "description": "Create a header component with tabs for navigating between all feedback and favorites.",
            "dependencies": [],
            "details": "Create components/feedback/FeedbackHeader.tsx with tabs for 'All Feedback' and 'Favorites'. Implement active state styling for the current tab. The component should handle tab switching and provide appropriate callbacks. Use Next.js Link components for navigation between /feedback and /feedback/favorites routes.",
            "status": "done",
            "testStrategy": "Test tab switching functionality and verify that the correct active states are applied based on the current route."
          },
          {
            "id": 4,
            "title": "Create FeedbackDetail Component",
            "description": "Develop a component to display detailed information about a single feedback entry.",
            "dependencies": [],
            "details": "Create components/feedback/FeedbackDetail.tsx that displays comprehensive information about a feedback entry including full content, metadata, and actions (such as favorite toggle). Design for readability and include appropriate spacing and typography. Include a back button to return to the feedback list.",
            "status": "done",
            "testStrategy": "Test the component with various feedback data structures and verify that all information is displayed correctly."
          },
          {
            "id": 5,
            "title": "Implement Feedback Page Routes",
            "description": "Create and connect all required pages for the feedback interface using Next.js routing.",
            "dependencies": [
              1,
              2,
              3,
              4
            ],
            "details": "Create three pages: 1) /feedback for the main feedback list, 2) /feedback/[id] for individual feedback details, and 3) /feedback/favorites for favorite items. Each page should use the appropriate components created in previous subtasks. Implement data fetching for each route and handle loading/error states. Refactor the existing feedback page to use the new components as specified in the additional context.",
            "status": "done",
            "testStrategy": "Test navigation between pages, verify that URL parameters are correctly handled, and ensure that data is properly fetched and displayed on each page."
          }
        ]
      },
      {
        "id": 11,
        "title": "Implement Context Management for Long-term Dialogue",
        "description": "Develop a system to manage and summarize long-term context for AI interactions.",
        "details": "Implement a context management system using a combination of database storage and in-memory caching (e.g., Redis). Create utility functions to summarize past interactions using OpenAI's summarization capabilities. Implement a system to rotate and update context based on relevance and recency.",
        "testStrategy": "Test context summarization with various interaction histories. Verify that context is correctly maintained and updated over time.",
        "priority": "medium",
        "dependencies": [
          8
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Design and Create Character Context Database Schema",
            "description": "Design and implement the database schema for character-specific context management in Supabase, including tables for storing raw interactions and hierarchical summaries.",
            "dependencies": [],
            "details": "Create the following tables in Supabase: 1) character_context_raw - stores recent raw interactions with timestamp, user_id, character_id, and content fields; 2) character_context_summaries - stores hierarchical summaries with user_id, character_id, summary_type (weekly, monthly, quarterly), period_start, period_end, and summary_content fields. Include appropriate indexes and foreign key relationships. Ensure the schema supports filtering interactions by character and excluding cross-character information.",
            "status": "done",
            "testStrategy": "Verify table creation with test data insertion and retrieval. Ensure proper constraints and relationships are enforced."
          },
          {
            "id": 2,
            "title": "Implement Context Collection System",
            "description": "Develop functions to collect and store relevant context data per user-character pair, including chat history, diary entries, and feedback.",
            "dependencies": [
              1
            ],
            "details": "Create utility functions to: 1) Capture and store new interactions in character_context_raw; 2) Retrieve character-specific information from existing tables (chats, diaries, feedback); 3) Filter data to ensure character isolation (no cross-character information sharing); 4) Implement retention policy to maintain only the most recent week of raw data. Use Supabase client for all database operations.",
            "status": "done",
            "testStrategy": "Test with mock interactions across multiple characters to verify proper isolation. Confirm retention policy correctly maintains only recent data."
          },
          {
            "id": 3,
            "title": "Develop Weekly Summary Generation System",
            "description": "Create a system to generate weekly summaries of user-character interactions using OpenAI's summarization capabilities.",
            "dependencies": [
              2
            ],
            "details": "Implement functions to: 1) Retrieve a week's worth of raw interactions for a specific user-character pair; 2) Use OpenAI API to generate concise, meaningful summaries; 3) Store these summaries in the character_context_summaries table with type 'weekly'; 4) Include metadata about the time period covered. Optimize prompt design for effective summarization that preserves key information while reducing token count.",
            "status": "done",
            "testStrategy": "Evaluate summary quality with test data containing various interaction patterns. Verify summaries maintain character-specific knowledge and tone."
          },
          {
            "id": 4,
            "title": "Implement Hierarchical Summary System",
            "description": "Develop a system to create higher-level summaries (monthly, quarterly) from collections of weekly summaries, forming a hierarchical context structure.",
            "dependencies": [
              3
            ],
            "details": "Create functions to: 1) Identify when 10 weekly summaries are available for aggregation; 2) Retrieve and combine these summaries; 3) Generate a higher-level summary using OpenAI; 4) Store in character_context_summaries with appropriate summary_type; 5) Implement recursive summarization for even longer-term context (quarterly from monthly, etc.). Design the system to maintain a balance between detail preservation and context compression.",
            "status": "done",
            "testStrategy": "Test with artificially aged data to verify proper hierarchical summary generation. Compare information retention across summary levels."
          },
          {
            "id": 5,
            "title": "Integrate Context Management with Chat System",
            "description": "Integrate the context management system with the existing chat functionality, including context retrieval for chat sessions and scheduled summary generation.",
            "dependencies": [
              4
            ],
            "details": "Implement: 1) A context builder function that assembles relevant context for a chat session by combining recent raw interactions with appropriate summaries; 2) A weekly scheduled task to trigger summary generation for all active user-character pairs; 3) Integration points with the existing chat system to provide context to the AI model; 4) Optimization to ensure context stays within token limits while prioritizing relevant information. Update the chat interface to utilize the new context management system.",
            "status": "done",
            "testStrategy": "Conduct end-to-end testing with simulated long-term interactions. Verify that characters maintain appropriate memory of past interactions while respecting character isolation."
          }
        ]
      },
      {
        "id": 12,
        "title": "Create User Profile and Settings Page",
        "description": "Develop a user profile page with settings and preferences.",
        "details": "Create a profile page component. Implement forms for updating user information and preferences. Add functionality to change password and manage account settings. Use Supabase to store and retrieve user preferences.",
        "testStrategy": "Test profile update functionality. Verify that user preferences are correctly saved and retrieved.",
        "priority": "low",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Implement Responsive Design and Mobile-First Approach",
        "description": "Ensure the application is fully responsive and optimized for mobile devices.",
        "details": "Use CSS modules or styled-components (version 5.3.10 or later) for styling. Implement a mobile-first design approach. Use media queries to adjust layouts for different screen sizes. Test and optimize touch interactions for mobile devices.",
        "testStrategy": "Test the application on various devices and screen sizes. Use browser developer tools to simulate different devices and verify responsiveness.",
        "priority": "high",
        "dependencies": [
          4,
          5,
          10,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Integrate Playwright for Web Scraping",
        "description": "Set up Playwright to scrape Yahoo! News for current events to incorporate into character feedback.",
        "details": "Install playwright (version 1.35.1 or later). Create a serverless function to periodically scrape Yahoo! News headlines. Implement parsing logic to extract relevant information from the scraped data. Store scraped data in Supabase for use in feedback generation.",
        "testStrategy": "Test the scraping function with mock HTML data. Verify that headlines are correctly extracted and stored.",
        "priority": "low",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Implement Footer Navigation",
        "description": "Create a footer navigation component with tabs for main app sections.",
        "details": "Design and implement a footer navigation component with tabs for 'Write Diary', 'List', 'Feedback', and 'My Page'. Use Next.js routing to handle navigation between pages. Implement active state styling for the current tab.",
        "testStrategy": "Test navigation functionality between different pages. Verify that the active tab is correctly highlighted.",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          10,
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 16,
        "title": "Add Data Persistence and Offline Support",
        "description": "Implement data persistence and offline functionality using service workers and IndexedDB.",
        "details": "Use next-pwa (version 5.6.0 or later) to add Progressive Web App (PWA) capabilities. Implement service workers for offline caching of assets and API responses. Use idb (version 7.1.1 or later) for client-side storage of diary entries and feedback. Implement sync functionality to update Supabase when online.",
        "testStrategy": "Test offline functionality by disabling network connection. Verify that the app works offline and syncs data when connection is restored.",
        "priority": "low",
        "dependencies": [
          4,
          5,
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "Implement Error Handling and Logging",
        "description": "Set up comprehensive error handling and logging throughout the application.",
        "details": "Implement a global error boundary using React Error Boundary. Set up error logging using a service like Sentry (use @sentry/nextjs version 7.54.0 or later). Create custom error pages for different HTTP status codes. Implement user-friendly error messages and recovery options.",
        "testStrategy": "Simulate various error scenarios and verify that they are handled gracefully. Check that errors are correctly logged and that users are presented with appropriate messages.",
        "priority": "medium",
        "dependencies": [
          1,
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "Perform Security Audit and Optimization",
        "description": "Conduct a security audit of the application and implement necessary optimizations.",
        "details": "Use OWASP ZAP or a similar tool to perform a security scan. Implement Content Security Policy (CSP) headers. Ensure all API endpoints are properly secured. Optimize API calls and implement caching where appropriate. Use React.memo and useMemo for performance optimization. Implement lazy loading for images and components.",
        "testStrategy": "Conduct penetration testing to identify security vulnerabilities. Use Lighthouse or similar tools to measure and improve performance metrics.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-28T06:24:13.044Z",
      "updated": "2025-07-03T10:42:30.852Z",
      "description": "Tasks for master context"
    }
  }
}